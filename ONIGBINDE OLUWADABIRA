def convert_binary_to_decimal(binary_input):
    binary_stack = []
    decimal_result = 0
    current_power = 0

    # Push each bit of the binary number onto the stack
    for binary_bit in binary_input:
        binary_stack.append(int(binary_bit))

    # Process the bits from right to left
    while binary_stack:
        bit = binary_stack.pop()
        decimal_result += bit * (2 ** current_power)
        current_power += 1

    return decimal_result

# Test cases
binary_numbers_list = ['11000101', '10101010', '11111111', '10000000', '1111100000']
for binary_num in binary_numbers_list:
    decimal_num = convert_binary_to_decimal(binary_num)
    print(f"Binary: {binary_num} -> Decimal: {decimal_num}")

def convert_decimal_to_binary(decimal_input):
    binary_stack = []

    # Convert decimal to binary using the division remainder method
    while decimal_input > 0:
        remainder = decimal_input % 2
        binary_stack.append(remainder)
        decimal_input //= 2

    # Pop elements from the stack to form the binary representation
    binary_output = ''
    while binary_stack:
        binary_output += str(binary_stack.pop())

    return binary_output if binary_output else '0'  # If the input decimal is 0, return '0' as binary

# Test cases
decimal_numbers_list = [13, 55, 255, 128, 496]
for decimal_num in decimal_numbers_list:
    binary_num = convert_decimal_to_binary(decimal_num)
    print(f"Decimal: {decimal_num} -> Binary: {binary_num}")

class InfixToPostfixConverter:
    def __init__(self):
        self.infix_expression = ""
        self.postfix_expression = ""
        self.precedence_map = {'+': 1, '-': 1, '*': 2, '/': 2}

    def is_operator(self, char):
        return (char == '+' or char == '-' or char == '*' or char == '/')

    def has_higher_precedence(self, op1, op2):
        return self.precedence_map[op1] >= self.precedence_map[op2]

    def convert_to_postfix(self):
        operators_stack = []
        self.postfix_expression = ""

        for char in self.infix_expression:
            if char == ' ':
                continue
            elif self.isalnum(char):
                self.postfix_expression += char
            elif char == '(':
                operators_stack.append(char)
            elif char == ')':
                while operators_stack and operators_stack[-1] != '(':
                    self.postfix_expression += operators_stack.pop()
                operators_stack.pop()  # Discard the '('
            elif self.is_operator(char):
                while (operators_stack and operators_stack[-1] != '('
                       and self.has_higher_precedence(operators_stack[-1], char)):
                    self.postfix_expression += operators_stack.pop()
                operators_stack.append(char)

        while operators_stack:
            self.postfix_expression += operators_stack.pop()

    def get_infix(self, expression):
        self.infix_expression = expression

    def show_infix(self):
        print("Infix Expression:", self.infix_expression)

    def show_postfix(self):
        print("Postfix Expression:", self.postfix_expression)

    def convert_and_show_postfix(self):
        self.convert_to_postfix()
        self.show_postfix()

# Main function
expressions_list = [
    "A + B - C",
    "(A + B) * C",
    "(A + B) * (C - D)",
    "A + ((B + C) * (E - F) - G) / (H - I)",
    "A + B * (C + D) - E / F * G + H"
]

for exp in expressions_list:
    converter_instance = InfixToPostfixConverter()
    converter_instance.get_infix(exp)
    converter_instance.show_infix()
    converter_instance.convert_and_show_postfix()
    print()
